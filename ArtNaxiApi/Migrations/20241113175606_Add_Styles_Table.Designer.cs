// <auto-generated />
using System;
using ArtNaxiApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtNaxiApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241113175606_Add_Styles_Table")]
    partial class Add_Styles_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtNaxiApi.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ArtNaxiApi.Models.SDRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CfgScale")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "cfg_scale");

                    b.Property<int>("Height")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "height");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NegativePrompt")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "negative_prompt");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "prompt");

                    b.Property<string>("SamplerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "sampler_name");

                    b.Property<string>("Scheduler")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "scheduler");

                    b.Property<int>("Seed")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "seed");

                    b.Property<int>("Steps")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "steps");

                    b.Property<string>("Styles")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "styles");

                    b.Property<int>("Width")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "width");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.ToTable("SDRequests");
                });

            modelBuilder.Entity("ArtNaxiApi.Models.SDRequestStyle", b =>
                {
                    b.Property<Guid>("SDRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StyleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SDRequestId", "StyleId");

                    b.HasIndex("StyleId");

                    b.ToTable("SDRequestStyle");
                });

            modelBuilder.Entity("ArtNaxiApi.Models.Style", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("ArtNaxiApi.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ArtNaxiApi.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("ArtNaxiApi.Models.Image", b =>
                {
                    b.HasOne("ArtNaxiApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtNaxiApi.Models.UserProfile", null)
                        .WithMany("Images")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtNaxiApi.Models.SDRequest", b =>
                {
                    b.HasOne("ArtNaxiApi.Models.Image", "Image")
                        .WithOne("Request")
                        .HasForeignKey("ArtNaxiApi.Models.SDRequest", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Image");
                });

            modelBuilder.Entity("ArtNaxiApi.Models.SDRequestStyle", b =>
                {
                    b.HasOne("ArtNaxiApi.Models.SDRequest", "SDRequest")
                        .WithMany("SDRequestStyles")
                        .HasForeignKey("SDRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtNaxiApi.Models.Style", "Style")
                        .WithMany("SDRequestStyles")
                        .HasForeignKey("StyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SDRequest");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("ArtNaxiApi.Models.UserProfile", b =>
                {
                    b.HasOne("ArtNaxiApi.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("ArtNaxiApi.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtNaxiApi.Models.Image", b =>
                {
                    b.Navigation("Request")
                        .IsRequired();
                });

            modelBuilder.Entity("ArtNaxiApi.Models.SDRequest", b =>
                {
                    b.Navigation("SDRequestStyles");
                });

            modelBuilder.Entity("ArtNaxiApi.Models.Style", b =>
                {
                    b.Navigation("SDRequestStyles");
                });

            modelBuilder.Entity("ArtNaxiApi.Models.User", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("ArtNaxiApi.Models.UserProfile", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
